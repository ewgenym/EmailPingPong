<UserControl x:Class="EmailPingPong.UI.Desktop.Views.ConversationTree"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:EmailPingPong.UI.Desktop.ViewModels"
			 xmlns:utils="clr-namespace:EmailPingPong.UI.Desktop.Utils"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300">
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*" />
			<ColumnDefinition Width="*" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<TextBlock Text="Group by:" Grid.Row="0" Grid.Column="0" Padding="0,3,3,3"/>
		<ComboBox Grid.Row="1" Grid.Column="0" Margin="0,0,3,3"
				  ItemsSource="{Binding Source={utils:Enumeration {x:Type local:GroupBy}}}"
				  DisplayMemberPath="Description"
				  SelectedValue="{Binding Path=GroupBy}"
				  SelectedValuePath="Value"/>
		<TextBlock Text="Search in:" Grid.Row="3" Grid.Column="0" Padding="0,3,3,3"/>
		<ComboBox Grid.Row="4" Grid.Column="0" Margin="0,0,3,3"
				  ItemsSource="{Binding Source={utils:Enumeration {x:Type local:SearchIn}}}"
				  DisplayMemberPath="Description"
				  SelectedValue="{Binding Path=SearchIn}"
				  SelectedValuePath="Value"/>
		<CheckBox Grid.Row="5" Grid.Column="0" Padding="3,3,3,3"
				  IsChecked="{Binding Path=ShowClosedConversations}">Show closed conversations</CheckBox>
		<TreeView ItemsSource="{Binding Items}"
		          Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" 
				  PreviewMouseLeftButtonDown="TreeView_PreviewMouseLeftButtonDown"
				  Name="conversationTree" 
				  ScrollViewer.HorizontalScrollBarVisibility="Disabled">
			<TreeView.ItemContainerStyle>
				<Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
					<Setter Property="HorizontalContentAlignment" Value="Stretch" />
					<Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
					<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
					<Setter Property="FontWeight" Value="{Binding IsUnread, Mode=OneWay}" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="TreeViewItem">
								<StackPanel>
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" MinWidth="19" />
											<ColumnDefinition Width="*" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition />
										</Grid.RowDefinitions>
										<ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Name="Expander">
											<ToggleButton.Style>
												<Style TargetType="ToggleButton">
													<Setter Property="UIElement.Focusable" Value="false" />
													<Setter Property="FrameworkElement.Width" Value="16" />
													<Setter Property="FrameworkElement.Height" Value="16" />
													<Setter Property="Control.Template">
														<Setter.Value>
															<ControlTemplate TargetType="ToggleButton">
																<Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
																	<Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
																		<Path.Data>
																			<PathGeometry Figures="M0,0L0,6L6,0z" />
																		</Path.Data>
																		<Path.RenderTransform>
																			<RotateTransform Angle="135" CenterX="3" CenterY="3" />
																		</Path.RenderTransform>
																	</Path>
																</Border>
																<ControlTemplate.Triggers>
																	<Trigger Property="UIElement.IsMouseOver" Value="True">
																		<Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF1BBBFA" />
																		<Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#00FFFFFF" />
																	</Trigger>
																	<Trigger Property="ToggleButton.IsChecked" Value="True">
																		<Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
																			<Setter.Value>
																				<RotateTransform Angle="180" CenterX="3" CenterY="3" />
																			</Setter.Value>
																		</Setter>
																		<Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#FF595959" />
																		<Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF262626" />
																	</Trigger>
																</ControlTemplate.Triggers>
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</ToggleButton.Style>
										</ToggleButton>
										<Border x:Name="Bd"
												HorizontalAlignment="Stretch"
												BorderThickness="{TemplateBinding Border.BorderThickness}"
												BorderBrush="{TemplateBinding Border.BorderBrush}"
												Padding="{TemplateBinding Control.Padding}"
												Background="{TemplateBinding Panel.Background}"
												SnapsToDevicePixels="True"
												Grid.Column="1">
											<ContentPresenter x:Name="PART_Header"
															  Content="{TemplateBinding HeaderedContentControl.Header}"
															  ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
															  ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
															  ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
															  ContentSource="Header"
															  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
															  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
										</Border>
										<ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
									</Grid>
								</StackPanel>
								<ControlTemplate.Triggers>
									<Trigger Property="TreeViewItem.IsExpanded" Value="False">
										<Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
									</Trigger>
									<Trigger Property="ItemsControl.HasItems" Value="False">
										<Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
									</Trigger>
									<Trigger Property="TreeViewItem.IsSelected" Value="True">
										<!--<Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />-->
										<Setter TargetName="Bd" Property="Panel.Background" Value="Transparent" />
										<!--<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />-->
									</Trigger>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="TreeViewItem.IsSelected" Value="True" />
											<Condition Property="Selector.IsSelectionActive" Value="False" />
										</MultiTrigger.Conditions>
										<!--<Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />-->
										<Setter TargetName="Bd" Property="Panel.Background" Value="Transparent" />
										<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
									</MultiTrigger>
									<Trigger Property="UIElement.IsEnabled" Value="False">
										<!--<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />-->
										<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Style.Triggers>
						<DataTrigger Binding="{Binding IsUnread}" Value="True">
							<Setter Property="FontWeight" Value="Bold" />
						</DataTrigger>
						<DataTrigger Binding="{Binding IsUnread}" Value="False">
							<Setter Property="FontWeight" Value="Normal" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</TreeView.ItemContainerStyle>
			<TreeView.Resources>
				<ContextMenu x:Key="CloseConversationMenu">
					<MenuItem Header="Close conversation" Click="CloseConversationMenuItem_OnClick"/>
				</ContextMenu>
				<ContextMenu x:Key="ReopenConversationMenu">
					<MenuItem Header="Reopen conversation" Click="ReopenConversationMenuItem_OnClick"/>
				</ContextMenu>
				<!--<BooleanToVisibilityConverter x:Key="Converter"/>-->
				<HierarchicalDataTemplate DataType="{x:Type local:CommentViewModel}" ItemsSource="{Binding Answers}">
					<StackPanel Margin="0,3,3,3">
					<Border BorderBrush="Black" Name="CommentBorder">
						<Border.Style>
							<Style TargetType="Border">
								<Style.Triggers>
									<DataTrigger Binding="{Binding IsOdd}" Value="True">
										<Setter Property="Background" Value="#FFD1EBC9"></Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding IsOdd}" Value="False">
										<Setter Property="Background" Value="#FFC3D9E4"></Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Border.Style>
						<StackPanel Margin="3">
							<TextBlock Name="CommentTextBlock"  TextWrapping="Wrap" TextTrimming="CharacterEllipsis" MaxHeight="38">
								<utils:BindableRun BoundText="{Binding Author}" FontWeight="Bold"/>
								<Run Text=": "></Run>
								<utils:BindableRun BoundText="{Binding Body}" />
							</TextBlock>
							<TextBlock Text="{Binding CreatedOn, StringFormat={}{0:MMMM dd\, yyyy} at {0:t}}" 
									   Foreground="Gray" FontWeight="Normal" Padding="0,6,0,0" FontSize="11" />
						</StackPanel>
					</Border>
					</StackPanel>
					<HierarchicalDataTemplate.Triggers>
						<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
							<Setter TargetName="CommentBorder" Property="BorderThickness" Value="2"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
							<Setter TargetName="CommentBorder" Property="BorderThickness" Value="0"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=IsClosed}" Value="True">
							<Setter TargetName="CommentTextBlock" Property="TextDecorations" Value="Strikethrough"></Setter>
							<Setter Property="ContextMenu" Value="{StaticResource ReopenConversationMenu}"></Setter>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=IsClosed}" Value="False">
							<Setter TargetName="CommentTextBlock" Property="TextDecorations" Value=""></Setter>
							<Setter Property="ContextMenu" Value="{StaticResource CloseConversationMenu}"></Setter>
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
								<Condition Binding="{Binding Path=IsSelectionActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="CommentBorder" Property="Border.BorderBrush" Value="Gray" />
						</MultiDataTrigger>
					</HierarchicalDataTemplate.Triggers>
				</HierarchicalDataTemplate>
				<HierarchicalDataTemplate DataType="{x:Type local:ConversationViewModel}" ItemsSource="{Binding Comments}">
					<StackPanel>
						<TextBlock Text="{Binding Topic}" Name="TopicTextBlock" Padding="3" FontSize="13"/>
					</StackPanel>
					<HierarchicalDataTemplate.Triggers>
						<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
							<Setter TargetName="TopicTextBlock" Property="TextBlock.FontWeight" Value="Bold"/>
							<Setter TargetName="TopicTextBlock" Property="TextBlock.Background" Value="#FFE1E1E1"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=IsClosed}" Value="True">
							<Setter TargetName="TopicTextBlock" Property="TextDecorations" Value="Strikethrough"></Setter>
							<Setter Property="ContextMenu" Value="{StaticResource ReopenConversationMenu}"></Setter>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=IsClosed}" Value="False">
							<Setter TargetName="TopicTextBlock" Property="TextDecorations" Value=""></Setter>
							<Setter Property="ContextMenu" Value="{StaticResource CloseConversationMenu}"></Setter>
						</DataTrigger>
					</HierarchicalDataTemplate.Triggers>
				</HierarchicalDataTemplate>
				<HierarchicalDataTemplate DataType="{x:Type local:FolderViewModel}" ItemsSource="{Binding Conversations}">
					<StackPanel>
						<TextBlock Text="{Binding FolderName}" Name="FolderTextBlock" Padding="3" FontSize="13"/>
					</StackPanel>
					<HierarchicalDataTemplate.Triggers>
						<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
							<Setter TargetName="FolderTextBlock" Property="TextBlock.FontWeight" Value="Bold"/>
							<Setter TargetName="FolderTextBlock" Property="TextBlock.Background" Value="#FFE1E1E1"/>
						</DataTrigger>
					</HierarchicalDataTemplate.Triggers>
				</HierarchicalDataTemplate>
			</TreeView.Resources>
		</TreeView>
	</Grid>
</UserControl>